/**
 * Obsidian Pywal Theme Plugin
 *
 * This plugin dynamically applies a color scheme to Obsidian based on the
 * colors generated by Pywal (https://github.com/dylanaraps/pywal).
 * It reads the `colors.json` file from the user's home directory and injects
 * the color palette as CSS variables into the Obsidian application.
 */

const { App, Plugin, PluginSettingTab, Setting } = require('obsidian');
const fs = require('fs');
const path = require('path');
const os = require('os');

const STYLE_ID = 'pywal-theme-styles';

const DEFAULT_SETTINGS = {
    palettePath: ''
}

class PywalThemePlugin extends Plugin {
    settings;

    /**
     * This method is called when the plugin is first loaded.
     */
    async onload() {
        console.log('Loading Pywal theme plugin');
        
        await this.loadSettings();
        this.addSettingTab(new PywalSettingTab(this.app, this));
        this.updateTheme();

        this.addCommand({
            id: 'reload-pywal-theme',
            name: 'Reload Pywal Theme',
            callback: () => {
                this.updateTheme();
            },
        });
    }

    /**
     * This method is called when the plugin is unloaded or disabled.
     */
    onunload() {
        console.log('Unloading Pywal theme plugin');
        this.resetTheme();
    }

    /**
     * Loads the plugin's settings from disk.
     */
    async loadSettings() {
        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    }

    /**
     * Saves the plugin's settings to disk.
     */
    async saveSettings() {
        await this.saveData(this.settings);
    }

    /**
     * Reads the Pywal colors.json file and triggers the style application.
     */
    async updateTheme() {
        let colorsPath;

        if (this.settings.palettePath && this.settings.palettePath.trim() !== '') {
            colorsPath = this.settings.palettePath;
        } else {
            const homeDir = os.homedir();
            colorsPath = path.join(homeDir, '.cache', 'wal', 'colors.json');
        }

        try {
            const colorsData = await fs.promises.readFile(colorsPath, 'utf8');
            const pywalColors = JSON.parse(colorsData);
            this.applyColors(pywalColors);
            console.log(`Pywal theme updated successfully from: ${colorsPath}`);
        } catch (error) {
            console.error(`Pywal color file not found or could not be read at: ${colorsPath}`, error);
            this.resetTheme();
        }
    }

    /**
     * Injects the Pywal color palette into the Obsidian application.
     * @param {object} pywalColors - The parsed JSON object from colors.json.
     */
    applyColors(pywalColors) {
        const colors = pywalColors.colors;
        const special = pywalColors.special;

        const cssContent = `
            .theme-dark, .theme-light {
                --background-primary: ${special.background};
                --background-secondary: ${colors.color0};
                --background-secondary-alt: ${colors.color0};
                --background-modifier-border: ${colors.color8};
                --text-normal: ${special.foreground};
                --text-muted: ${colors.color7};
                --text-accent: ${colors.color4};
                --text-accent-hover: ${colors.color6};
                --interactive-accent: ${colors.color4};
                --interactive-accent-hover: ${colors.color6};
                --text-highlight-bg: ${colors.color2}40; /* 40 adds 25% alpha transparency */

                --color-red: ${colors.color1};
                --color-green: ${colors.color2};
                --color-yellow: ${colors.color3};
                --color-blue: ${colors.color4};
                --color-magenta: ${colors.color5};
                --color-cyan: ${colors.color6};
            }
        `;

        let styleEl = document.getElementById(STYLE_ID);
        if (!styleEl) {
            styleEl = document.createElement('style');
            styleEl.id = STYLE_ID;
            document.head.appendChild(styleEl);
        }

        styleEl.textContent = cssContent;
    }

    /**
     * Removes the injected <style> tag to revert to the original theme.
     */
    resetTheme() {
        const styleEl = document.getElementById(STYLE_ID);
        if (styleEl) {
            styleEl.remove();
        }
    }
}

/**
 * Adds a settings tab to the Obsidian settings panel.
 */
class PywalSettingTab extends PluginSettingTab {
    plugin;

    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }

    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Pywal Theme Settings' });

        new Setting(containerEl)
            .setName('Path to colors.json')
            .setDesc('Specify the absolute path to your Pywal colors.json file. Leave blank to use the default (~/.cache/wal/colors.json).')
            .addText(text => text
                .setPlaceholder(path.join(os.homedir(), '.cache', 'wal', 'colors.json'))
                .setValue(this.plugin.settings.palettePath)
                .onChange(async (value) => {
                    this.plugin.settings.palettePath = value;
                    await this.plugin.saveSettings();
                    await this.plugin.updateTheme();
                }));
    }
}

module.exports = PywalThemePlugin;
