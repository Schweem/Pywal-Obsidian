/**
 * Obsidian Pywal Theme Plugin
 *
 * This plugin dynamically reads a Pywal-generated color palette and writes it
 * to a physical theme file within the Obsidian themes directory. This creates a
 * persistent theme that loads instantly on startup.
 */

const { App, Plugin, PluginSettingTab, Setting, Notice } = require('obsidian');
const fs = require('fs').promises;
const path = require('path');
const os = require('os');

// The fixed directory name for the generated theme.
const THEME_DIR_NAME = 'pywal-generated-theme';

const DEFAULT_SETTINGS = {
    palettePath: '',
    themeName: 'Pywal Theme' // This is now just the display name.
}

class PywalThemePlugin extends Plugin {
    settings;

    /**
     * This method is called when the plugin is first loaded.
     */
    async onload() {
        console.log('Loading Pywal theme plugin');
        
        await this.loadSettings();
        this.addSettingTab(new PywalSettingTab(this.app, this));
        
        // Defer the initial theme update until the workspace is fully loaded.
        // This prevents race conditions on startup.
        this.app.workspace.onLayoutReady(async () => {
            await this.updateThemeFile();
        });

        this.addCommand({
            id: 'reload-pywal-theme',
            name: 'Reload Pywal Theme',
            callback: () => {
                this.updateThemeFile();
            },
        });
    }

    /**
     * This method is called when the plugin is unloaded or disabled.
     */
    onunload() {
        console.log('Unloading Pywal theme plugin');
    }

    /**
     * Loads the plugin's settings from disk.
     */
    async loadSettings() {
        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    }

    /**
     * Saves the plugin's settings to disk.
     */
    async saveSettings() {
        await this.saveData(this.settings);
    }

    /**
     * Reads the Pywal colors.json file and writes the corresponding theme if colors have changed.
     */
    async updateThemeFile() {
        let colorsPath;

        if (this.settings.palettePath && this.settings.palettePath.trim() !== '') {
            colorsPath = this.settings.palettePath.trim();
        } else {
            const homeDir = os.homedir();
            colorsPath = path.join(homeDir, '.cache', 'wal', 'colors.json');
        }

        try {
            const colorsData = await fs.readFile(colorsPath, 'utf8');
            const pywalColors = JSON.parse(colorsData);

            // Compare new colors with the current theme before writing
            const newBg = pywalColors.special.background;
            const currentBg = await this.getCurrentThemeBackground();
            
            if (newBg === currentBg) {
                console.log("Pywal colors have not changed. No update needed.");
                return; // Stop execution if colors are the same
            }

            const cssContent = this.generateCss(pywalColors);
            await this.writeTheme(cssContent);

            this.app.customCss.setTheme(THEME_DIR_NAME);
            new Notice(`Pywal theme '${this.settings.themeName}' has been updated and applied.`);

        } catch (error) {
            if (error.code === 'ENOENT') {
                new Notice(`Error: Pywal file not found at path: ${colorsPath}. Please check your path in settings and ensure the file exists.`, 10000);
            } else if (error.code === 'EACCES') {
                new Notice(`Error: Permission denied. Obsidian cannot access the file at ${colorsPath}.`, 10000);
            } else {
                console.error(`Pywal theme error: ${error.message}`);
                new Notice(`Error processing theme file. See console (Ctrl+Shift+I) for details.`, 5000);
            }
        }
    }

    /**
     * Reads the currently active theme.css file to get its primary background color.
     * @returns {Promise<string|null>} The hex code of the background color or null if not found.
     */
    async getCurrentThemeBackground() {
        try {
            const themePath = path.join(this.app.vault.adapter.getBasePath(), this.app.vault.configDir, 'themes', THEME_DIR_NAME, 'theme.css');
            const currentCss = await fs.readFile(themePath, 'utf8');
            const match = currentCss.match(/--background-primary:\s*(#[0-9a-fA-F]{6,8});/);
            return match ? match[1] : null;
        } catch (error) {
            // If the file doesn't exist (e.g., first run), return null so a new theme is always generated.
            return null;
        }
    }

    /**
     * Generates the CSS content for the theme file.
     * @param {object} pywalColors - The parsed JSON object from colors.json.
     * @returns {string} The CSS content for the theme.
     */
    generateCss(pywalColors) {
        const colors = pywalColors.colors;
        const special = pywalColors.special;

        return `
/* * This theme is auto-generated by the Obsidian Pywal Theme plugin.
 * Do not edit this file directly, as your changes will be overwritten.
 */
.theme-dark, .theme-light {
    --background-primary: ${special.background};
    --background-secondary: ${colors.color0};
    --background-secondary-alt: ${colors.color0};
    --background-modifier-border: ${colors.color8};
    --text-normal: ${special.foreground};
    --text-muted: ${colors.color7};
    --text-accent: ${colors.color4};
    --text-accent-hover: ${colors.color6};
    --interactive-accent: ${colors.color4};
    --interactive-accent-hover: ${colors.color6};
    --text-highlight-bg: ${colors.color2}40; /* 40 adds 25% alpha transparency */

    --color-red: ${colors.color1};
    --color-green: ${colors.color2};
    --color-yellow: ${colors.color3};
    --color-blue: ${colors.color4};
    --color-magenta: ${colors.color5};
    --color-cyan: ${colors.color6};
}
        `;
    }

    /**
     * Writes the theme files (theme.css and manifest.json) to the vault.
     * @param {string} cssContent - The CSS content to write to the theme file.
     */
    async writeTheme(cssContent) {
        const vaultPath = this.app.vault.adapter.getBasePath();
        const themeDir = path.join(vaultPath, this.app.vault.configDir, 'themes', THEME_DIR_NAME);
        
        await fs.mkdir(themeDir, { recursive: true });
        await fs.writeFile(path.join(themeDir, 'theme.css'), cssContent);

        const manifest = {
            name: this.settings.themeName,
            version: '1.0.0',
            author: 'Pywal Theme Plugin'
        };
        await fs.writeFile(path.join(themeDir, 'manifest.json'), JSON.stringify(manifest, null, 2));
    }
}

/**
 * Adds a settings tab to the Obsidian settings panel.
 */
class PywalSettingTab extends PluginSettingTab {
    plugin;

    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }

    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Pywal Theme Settings' });

        new Setting(containerEl)
            .setName('Theme Display Name')
            .setDesc('The name for the generated theme as it appears in the Appearance dropdown.')
            .addText(text => text
                .setPlaceholder('Pywal Theme')
                .setValue(this.plugin.settings.themeName)
                .onChange(async (value) => {
                    this.plugin.settings.themeName = value || 'Pywal Theme';
                    await this.plugin.saveSettings();
                    await this.plugin.updateThemeFile();
                }));
        
        new Setting(containerEl)
            .setName('Path to colors.json')
            .setDesc('Specify the absolute path to your Pywal colors.json file. Leave blank to use the default (~/.cache/wal/colors.json).')
            .addText(text => text
                .setPlaceholder(path.join(os.homedir(), '.cache', 'wal', 'colors.json'))
                .setValue(this.plugin.settings.palettePath)
                .onChange(async (value) => {
                    this.plugin.settings.palettePath = value;
                    await this.plugin.saveSettings();
                    await this.plugin.updateThemeFile();
                }));
    }
}

module.exports = PywalThemePlugin;
